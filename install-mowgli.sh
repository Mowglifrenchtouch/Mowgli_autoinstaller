#!/bin/bash
# install-mowgli.sh : Script d'installation pour OpenMower Mowgli (mode terminal)

# === √âtat des modules install√©s / valid√©s ===
# ‚úîÔ∏è  installation_auto            ‚Üí √† faire (composite)
# ‚úîÔ∏è  mise_a_jour_systeme         ‚Üí √† idempotenter
# ‚úîÔ∏è  configuration_uart          ‚Üí √† faire (v√©rifier dans /boot/firmware/config.txt)
# ‚úîÔ∏è  installer_outils            ‚Üí √† faire (htop, lazydocker...)
# ‚úîÔ∏è  install_docker              ‚Üí ‚úÖ fait (idempotent + confirmation)
# ‚úîÔ∏è  configuration_gps           ‚Üí √† faire
# ‚úîÔ∏è  clonage_depot_mowgli_docker ‚Üí √† faire (git pull si d√©j√† l√† ?)
# ‚úîÔ∏è  generation_env              ‚Üí √† faire (.env d√©j√† pr√©sent ?)
# ‚úîÔ∏è  deploiement_conteneurs      ‚Üí √† faire (docker compose ps ?)
# ‚úîÔ∏è  suivi_mqtt_robot_state      ‚Üí √† faire (MQTT actif ?)
# ‚úîÔ∏è  personalisation_logo        ‚Üí volontairement NON idempotent ‚úÖ
# ‚úîÔ∏è  mise_a_jour_installer       ‚Üí d√©j√† g√©r√© (git behind)
# ‚úîÔ∏è  desinstallation_restoration ‚Üí √† faire (backup + reset ?)
# ‚úîÔ∏è  mise_a_jour_firmware_robot  ‚Üí optionnel (flash detect√© ?)

# D√©finir le dossier du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# D√©tection automatique de la langue (via fichiers en.sh / fr.sh √† la racine)
LANG_SYS=$(locale | grep LANG= | cut -d= -f2)
LANG_CODE="fr"
[[ "$LANG_SYS" =~ en ]] && LANG_CODE="en"

LANG_FILE="$SCRIPT_DIR/${LANG_CODE}.sh"
if [ -f "$LANG_FILE" ]; then
  source "$LANG_FILE"
else
  echo "[WARN] Fichier de langue introuvable : $LANG_FILE. Fallback en fran√ßais."
  source "$SCRIPT_DIR/fr.sh"
fi

# Option debug (ne pas effacer le terminal)
DEBUG=${DEBUG:-0}

# Ne pas ex√©cuter avec sudo
if [ "$EUID" -eq 0 ]; then
  echo "Ce script ne doit pas √™tre ex√©cut√© avec sudo."
  echo "Lancez-le sans sudo : ./install-mowgli.sh"
  exit 1
fi

set -e

# Variables
CONFIG_FILE="/boot/firmware/config.txt"
BACKUP_SUFFIX=".bak"
ENV_FILE=".env"

# Fonctions de v√©rification idempotentes (extraits simplifi√©s)
ask_update_if_exists() {
  local message="$1"
  echo -n "$message (y/N) : "
  read -r answer
  [[ "$answer" == "y" || "$answer" == "Y" ]]
}

check_docker_installed() {
  if command -v docker &>/dev/null && docker compose version &>/dev/null; then
    echo "‚úÖ Docker et Docker Compose sont d√©j√† install√©s."
    ask_update_if_exists "Souhaitez-vous les mettre √† jour ?"
    return $? # 0 = update, 1 = skip
  else
    return 0 # pas install√© ‚Üí installer
  fi
}

install_docker() {
  if ! check_docker_installed; then
    echo "‚è≠Ô∏è  Installation Docker ignor√©e."
    return
  fi

  echo "‚öôÔ∏è  Installation de Docker et Docker Compose..."
  sudo apt-get update
  sudo apt-get install -y docker.io docker-compose
}

# Boucle principale
while true; do
  [[ "$DEBUG" -ne 1 ]] && clear

  NOW=$(date "+%d/%m/%Y %H:%M:%S")

  echo "===== √âTAT DES MODULES ====="
  echo "‚úîÔ∏è  I) Installation compl√®te         ‚Üí √† faire (composite)"
  echo "‚úîÔ∏è  U) Mise √† jour syst√®me          ‚Üí √† idempotenter"
  echo "‚úîÔ∏è  J) Configuration UART           ‚Üí √† faire (/boot/firmware/config.txt)"
  echo "‚úîÔ∏è  T) Outils compl√©mentaires        ‚Üí √† faire (htop, lazydocker...)"
  echo "‚úÖ  D) Docker & Compose              ‚Üí OK (idempotent)"
  echo "‚úîÔ∏è  G) Configuration GPS            ‚Üí √† faire"
  echo "‚úîÔ∏è  C) Clonage mowgli-docker        ‚Üí √† faire (d√©j√† clon√© ?)"
  echo "‚úîÔ∏è  E) G√©n√©ration .env              ‚Üí √† faire (.env existant ?)"
  echo "‚úîÔ∏è  O) D√©ploiement Docker           ‚Üí √† faire (conteneurs actifs ?)"
  echo "‚úîÔ∏è  M) Suivi MQTT                   ‚Üí √† faire"
  echo "‚ùó  P) Personnalisation logo        ‚Üí volontairement non idempotent"
  echo "‚úîÔ∏è  H) Mise √† jour de l‚Äôinstaller   ‚Üí d√©j√† g√©r√©"
  echo "‚úîÔ∏è  Z) D√©sinstallation              ‚Üí √† faire (reset/restore)"
  echo "‚úîÔ∏è  F) Mise √† jour firmware robot   ‚Üí optionnel"
  echo

  # Collecte infos syst√®me
  HOSTNAME=$(hostname)
  IP=$(hostname -I | awk '{print $1}')
  MAC=$(ip link show eth0 | awk '/ether/ {print $2}')
  SSID=$(iwgetid -r 2>/dev/null || echo "non connect√©")
  UPTIME=$(uptime -p)
  TEMP=$(vcgencmd measure_temp 2>/dev/null | cut -d= -f2 || echo "n/a")
  LOAD=$(awk '{print $1, $2, $3}' /proc/loadavg)
  MEM=$(free -m | awk '/Mem/ {printf "%d MiB / %d MiB", $3, $2}')
  DISK=$(df -h / | awk 'END {print $4 " libres sur " $2}')
  UPDATE_COUNT=$(apt list --upgradeable 2>/dev/null | grep -v "Listing..." | wc -l)
  SYSTEM_STATUS=$([ "$UPDATE_COUNT" -eq 0 ] && echo "√† jour" || echo "mises √† jour disponibles")

  if [ -d "$SCRIPT_DIR/.git" ]; then
    git -C "$SCRIPT_DIR" remote update > /dev/null 2>&1
    behind=$(git -C "$SCRIPT_DIR" rev-list --count HEAD..origin/main)
    INSTALLER_STATUS=$([ "$behind" -gt 0 ] && echo "mise √† jour disponible (+${behind} commits)" || echo "√† jour")
  else
    INSTALLER_STATUS="non versionn√©"
  fi

  echo "[$NOW]"
  echo "Hostname       : $HOSTNAME"
  echo "IP locale      : $IP"
  echo "Adresse MAC    : $MAC"
  echo "WiFi (SSID)    : $SSID"
  echo "Uptime         : $UPTIME"
  echo "Temp√©rature    : $TEMP"
  echo "Charge CPU     : $LOAD"
  echo "RAM utilis√©e   : $MEM"
  echo "Disque libre   : $DISK"
  echo "√âtat syst√®me   : $SYSTEM_STATUS"
  echo "Etat Mowgli_Installer : $INSTALLER_STATUS"
  echo

  echo "===== INSTALLATION & CONFIGURATION ====="
  echo "I) Installation compl√®te"
  echo "U) Mise √† jour du syst√®me"
  echo "J) Configuration UART"
  echo "T) Outils compl√©mentaires"
  echo "D) Docker & Compose"
  echo "G) Configuration GPS"
  echo "C) Clonage depot mowgli-docker"
  echo "E) Generation .env"
  echo "O) Deploiement conteneurs Docker"
  echo "M) Suivi MQTT robot_state"
  echo "P) Personalisation logo"
  echo "H) Mise a jour Mowgli installer"
  echo "Z) Desinstallation et restauration"
  echo "F) Mise √† jour firmware robot"
  echo "X) Quitter"

  read -p "Choix> " choice
  case "$choice" in
    I|i) installation_auto ;;
    U|u) mise_a_jour_systeme ;;
    J|j) configuration_uart ;;
    T|t) installer_outils ;;
    D|d) install_docker ;;
    G|g) configuration_gps ;;
    C|c) clonage_depot_mowgli_docker ;;
    E|e) generation_env ;;
    O|o) deploiement_conteneurs ;;
    M|m) suivi_mqtt_robot_state ;;
    P|p) personalisation_logo ;;
    H|h) mise_a_jour_installer ;;
    Z|z) desinstallation_restoration ;;
    F|f) mise_a_jour_firmware_robot ;;
    X|x)
      echo "√Ä bient√¥t !"
      read -p "Souhaitez-vous red√©marrer le Raspberry Pi ? (y/N) : " reboot_choice
      if [[ "$reboot_choice" =~ ^[Yy]$ ]]; then
        echo "üîÅ Red√©marrage en cours..."
        sudo reboot
      else
        exit 0
      fi ;;
    *) echo "[ERREUR] Option invalide." ;;
  esac

  [[ "$DEBUG" -eq 1 ]] && echo -e "\n[DEBUG] Retour au menu principal.\n" || pause_ou_touche
done
