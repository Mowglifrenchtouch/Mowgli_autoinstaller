#!/bin/bash
# functions/clonage_depot_mowgli_docker.sh
# Clonage ou mise √† jour du d√©p√¥t mowgli-docker

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONF_FILE="$SCRIPT_DIR/clone_mowgli_docker.conf"

# Chargement des fonctions utilitaires
[ -f "$SCRIPT_DIR/functions/utils.sh" ] && source "$SCRIPT_DIR/functions/utils.sh"

clonage_depot_mowgli_docker() {
  echo "=== Clonage ou mise √† jour du d√©p√¥t Mowgli Docker ==="

  # Cr√©ation automatique du fichier de configuration si absent
  if [ ! -f "$CONF_FILE" ]; then
    cp "$SCRIPT_DIR/clone_mowgli_docker.conf.example" "$CONF_FILE"
    echo "[WARN] Exemple de config clonage cr√©√© : $CONF_FILE"
    echo "       √âditez ce fichier pour personnaliser le d√©p√¥t, puis relancez l'option C)."
    pause_ou_touche
    return 1
  fi

  # Nettoyage du fichier (UTF-8 BOM + CRLF)
  sed -i '1 s/^\xEF\xBB\xBF//' "$CONF_FILE"
  sed -i 's/\r$//' "$CONF_FILE"
  source "$CONF_FILE"

  # üß™ V√©rification des variables obligatoires
  if [ -z "$REPO_URL" ] || [ -z "$BRANCH" ] || [ -z "$TARGET_DIR" ]; then
    echo "[ERREUR] Une ou plusieurs variables sont manquantes dans le fichier $CONF_FILE"
    echo "         V√©rifiez : REPO_URL, BRANCH, TARGET_DIR"
    pause_ou_touche
    return 1
  fi

  echo "üîÅ D√©p√¥t      : $REPO_URL"
  echo "üîÄ Branche    : $BRANCH"
  echo "üìÅ Cible      : $TARGET_DIR"
  echo

  # V√©rification de la pr√©sence de git
  if ! command -v git >/dev/null 2>&1; then
    echo "‚öôÔ∏è  Git non d√©tect√©, installation en cours..."
    sudo apt update && sudo apt install -y git
  fi

  # Clonage ou mise √† jour
  if [ -d "$TARGET_DIR/.git" ]; then
    echo "‚úÖ Le d√©p√¥t existe d√©j√† dans : $TARGET_DIR"
    if ask_update_if_exists "Souhaitez-vous le mettre √† jour (git fetch + reset) ?"; then
      git -C "$TARGET_DIR" fetch origin "$BRANCH" \
        && git -C "$TARGET_DIR" reset --hard "origin/$BRANCH" \
        || { echo "[ERREUR] √âchec de mise √† jour."; pause_ou_touche; return 1; }
      echo "[OK] D√©p√¥t mis √† jour avec succ√®s."
    else
      echo "‚è≠Ô∏è  Mise √† jour ignor√©e."
    fi
  else
    echo "‚û°Ô∏è  Clonage du d√©p√¥t dans : $TARGET_DIR"
    rm -rf "$TARGET_DIR"
    git clone --branch "$BRANCH" "$REPO_URL" "$TARGET_DIR" \
      || { echo "[ERREUR] √âchec du clonage."; pause_ou_touche; return 1; }
    echo "[OK] D√©p√¥t clon√© avec succ√®s."
  fi

  pause_ou_touche
}
